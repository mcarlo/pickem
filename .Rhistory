shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
library(httr)
library(rvest)
library(magrittr)
freak_get <- GET("http://torrentfreak.com/top-10-most-pirated-movies-of-the-week-130304/")
freak_html <- htmlParse(content(freak_get, as="text"))
library(XML)
freak_html <- htmlParse(content(freak_get, as="text"))
freak <- html_session("http://torrentfreak.com/top-10-most-pirated-movies-of-the-week-130304/")
xpathSApply(freak_html, "//*/td[3]", xmlValue)[1:10]
xpathSApply(freak_html, "//*/td[1]", xmlValue)[2:11]
xpathSApply(freak_html, "//*/td[4]", xmlValue)
xpathSApply(freak_html, "//*/td[4]/a[contains(@href,'imdb')]", xmlAttrs, "href")
freak %>% html_nodes(xpath="//*/td[3]") %>% html_text() %>% .[1:10]
freak %>% html_nodes(xpath="//*/td[1]") %>% html_text() %>% .[2:11]
freak %>% html_nodes(xpath="//*/td[4]") %>% html_text() %>% .[1:10]
freak %>% html_nodes(xpath="//*/td[4]/a[contains(@href,'imdb')]") %>% html_attr("href") %>% .[1:10]
freak %>% html_nodes("td:nth-child(3)") %>% html_text() %>% .[1:10]
freak %>% html_nodes("td:nth-child(1)") %>% html_text() %>% .[2:11]
freak %>% html_nodes("td:nth-child(4)") %>% html_text() %>% .[1:10]
freak %>% html_nodes("td:nth-child(4) a[href*='imdb']") %>% html_attr("href") %>% .[1:10]
data.frame(movie=freak %>% html_nodes("td:nth-child(3)") %>% html_text() %>% .[1:10],
rank=freak %>% html_nodes("td:nth-child(1)") %>% html_text() %>% .[2:11],
rating=freak %>% html_nodes("td:nth-child(4)") %>% html_text() %>% .[1:10],
imdb.url=freak %>% html_nodes("td:nth-child(4) a[href*='imdb']") %>% html_attr("href") %>% .[1:10],
stringsAsFactors=FALSE)
install.packages(c("rlist", "pipeR"))
library(rvest) # devtools::install_github("hadley/rvest")
install.packages("Rcpp")
install.packages("xml2")
library(rvest) # devtools::install_github("hadley/rvest")
library(rlist) # devtools::install_github("rlist","renkun-ken")
library(pipeR)
url <- "http://cran.r-project.org/web/packages/available_packages_by_date.html"
Pipe(url)$
.(~ message(Sys.time(),": downloading"))$
html()$
html_nodes(xpath = "//tr//td[3]")$
.(~ message("number of packages: ", length(.)))$
html_text(trim = TRUE)$
.(~ message(Sys.time(),": text extracted"))$
list.map(Pipe(.)$
strsplit("[^a-zA-Z]")$
unlist(use.names = FALSE)$
tolower()$
list.filter(nchar(.) > 3L)$
value)$
unlist()$
table()$
sort(decreasing = TRUE)$
head(50)$
.(~ message(Sys.time(),": task complete"))
url <- "http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=6&type=c"
Pipe(url)$
.(~ message(Sys.time(),": downloading"))$
html()$
html_nodes(xpath = "//tr//td[3]")$
.(~ message("number of packages: ", length(.)))$
html_text(trim = TRUE)$
.(~ message(Sys.time(),": text extracted"))$
list.map(Pipe(.)$
strsplit("[^a-zA-Z]")$
unlist(use.names = FALSE)$
tolower()$
list.filter(nchar(.) > 3L)$
value)$
# put everything in a large character vector
unlist()$
# create a table of word count
table()$
# sort the table descending
sort(decreasing = TRUE)$
# take out the first 100 elements
head(50)$
.(~ message(Sys.time(),": task complete"))
dummy_results <- matrix(rep(1:8, each = 5), nrow = 5)
dummy_results
dummy_fans <- matrix(rep(2:3, each = 5), nrow = 5)
dummy_fans
dummy_results + dummy_fans
dummy_results > dummy_fans
dummy_results > dummy_fans[,1]
?mapply
?mat
genGTmatrix <- function(vec, mat){
mat > vec
}
genGTmatrix <- function(vec, mat){ # vec must be same length as nrow(mat) or dim(mat)[1]
colSums(mat > vec)
}
sumGTmatrix(scoringMat, resultsMat){
outVec <- rep(0, ncol(resultsMat))
reps <- ncol(scoringMat)
for (j in 1:reps){
outVec <- outVec + genGTmatrix(scoringMat[, j], resultsMat)
}
outVec
}
sumGTmatrix <- function(scoringMat, resultsMat){
outVec <- rep(0, ncol(resultsMat))
reps <- ncol(scoringMat)
for (j in 1:reps){
outVec <- outVec + genGTmatrix(scoringMat[, j], resultsMat)
}
outVec
}
sumGTmatrix(dummy_fans, dummy_results)
system.time(sumGTmatrix(dummy_fans, dummy_results))
dummy_results <- matrix(rep(1:80, each = 500), nrow = 500)
dummy_fans <- matrix(rep(2:3, each = 500), nrow = 500)
system.time(sumGTmatrix(dummy_fans, dummy_results))
sumGTmatrix(dummy_fans, dummy_results)
dummy_results <- matrix(rep(1:65536, each = 2000), nrow = 2000)
dummy_fans <- matrix(rep(1:10, each = 2000), nrow = 2000)
system.time(sumGTmatrix(dummy_fans, dummy_results))
library(compiler)
cmpSumGT <- cmpfun(sumGTmatrix)
system.time(cmpSumGT(dummy_fans, dummy_results))
system.time(bestVec <- cmpSumGT(dummy_fans, dummy_results))
head(bestVec)
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
library(memisc)
coversNFL_parsed <- read_html("http://www.covers.com/odds/football/nfl-spreads.aspx", encoding = "UTF-8")
html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
NFLtable <- html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
unlist(stri_split_regex(NFLtable[[3]]$X1[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
winProb <- function(spread){
if(is.numeric(spread)){
1-pnorm(spread, sd=13.3, lower.tail = T)
} else {
NA
}
}
victorProb <- function(prob){max(prob, 1 - prob)}
# Functions for point spread data from Covers
genNFLtables <- function(){
coversNFL_parsed <- read_html("http://www.covers.com/odds/football/nfl-spreads.aspx", encoding = "UTF-8")
html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
}
genNFLSchedule <- function(NFLtable){
unlist(stri_split_regex(NFLtable[[3]]$X1[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
}
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
weekNum = 13; seasonNum = 2015
week <- weekNum
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
rawSchedule
tablesNFL
tablesNFL$X1
tablesNFL[[1]]
tablesNFL[[2]]
tablesNFL[[3]]
tablesNFL[[4]]
?grepl
gsub("pk", 0, tablesNFL[[3]])
tablesNFL[[3]]
str(tablesNFL[[3]])
nGames =16
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
NFLtable <- genNFLtabls()
NFLtable <- genNFLtables()
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
linesMatrix
lines
clean("   pk")
?gsub
gsub("pk", 0, lines)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
winProbMatrix[, 1] <- sapply(as.numeric(linesMatrix[, V2]), winProb)
winProbMatrix
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
system.time(genWeeklyCSV(14))
data <- read.csv("WEEK14_2015.csv", header=T, stringsAsFactors = F)
winprob <- data$WinProbability
confidence<-data$Confidence
data
getwd())
getwd()
# Universal functions and data for WTP web scraping
rm(list = ls())
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
library(memisc)
#rm(wtpNames, yahooNames, NFLdf)
winProb <- function(spread){
if(is.numeric(spread)){
1-pnorm(spread, sd=13.3, lower.tail = T)
} else {
NA
}
}
victorProb <- function(prob){max(prob, 1 - prob)}
# Functions for point spread data from Covers
genNFLtables <- function(){
coversNFL_parsed <- read_html("http://www.covers.com/odds/football/nfl-spreads.aspx", encoding = "UTF-8")
html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
}
genNFLSchedule <- function(NFLtable){
unlist(stri_split_regex(NFLtable[[3]]$X1[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
}
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
nGames = 16
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
NFLtable <- genNFLtables()
NFLtable
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
?gsub()
subPK <- function(charVec){
gsub("pk", 0, charVec)
}
subPK("the line is pk and the overunder is na")
grepl("pk", NFLtable)
grepl("pk", NFLtable[[3]]$X4)
NFLtable[[3]]$X4
NFLtable[[3]]$X4[grepl("pk", NFLtable[[3]]$X4)]
lines[grepl("pk", lines)]
sapply(lines, subPK)
sapply(lines, subPK)[grepl("pk", lines)]
sapply(lines, subPK)
lines <- sapply(lines, subPK)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
winProbMatrix[, 1] <- sapply(as.numeric(linesMatrix[, V2]), winProb)
winProbMatrix
runif(1)
subPK <- function(charVec){
pseudoLine <- runif(1) - .5
gsub("pk", pseudoLine, charVec)
}
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
NFLtable <- genNFLtables()
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subPK)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
winProbMatrix[, 1] <- sapply(as.numeric(linesMatrix[, V2]), winProb)
winProbMatrix
lines <- unlist(stri_split_regex(NFLtable[[3]]$X6[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 12)])
winProbMatrix[, 2] <- sapply(as.numeric(linesMatrix[, V2]), winProb)
winProbMatrix
linesMatrix
subOFFpk <- function(charVec){
pseudoLine <- runif(1) - .5
gsub("OFF", pseudoLine, gsub("pk", pseudoLine, charVec))
}
subPK("the line is pk and the overunder is OFF")
subOFFpk <- function(charVec){
pseudoLine <- runif(1) - .5
subPK <- gsub("pk", pseudoLine, charVec)
gsub("OFF", pseudoLine, subPK)
}
subPK("the line is pk and the overunder is OFF")
charVec = "the line is pk and the overunder is OFF"
pseudoLine <- runif(1) - .5
subPK <- gsub("pk", pseudoLine, charVec)
subPK
gsub("OFF", pseudoLine, subPK)
pseudoLine <- runif(1) - .5
subPK <- gsub("pk", pseudoLine, charVec)
pseudoLine <- runif(1) - .5
gsub("OFF", pseudoLine, subPK)
subOFFpk <- function(charVec){ #charVec = "the line is pk and the overunder is OFF"
pseudoLine <- runif(1) - .5
subPK <- gsub("pk", pseudoLine, charVec)
pseudoLine <- runif(1) - .5
gsub("OFF", pseudoLine, subPK)
} #subPK("the line is pk and the overunder is OFF")
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subPK)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
winProbMatrix[, 1] <- sapply(as.numeric(linesMatrix[, V2]), winProb)
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
NFLtable <- genNFLtables()
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subPK)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subOFFpk)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
subOFFpk(linesMatrix[, V2])
winProbMatrix[, 1] <- sapply(as.numeric(V2sub), winProb)
V2sub <- subOFFpk(linesMatrix[, V2])
winProbMatrix[, 1] <- sapply(as.numeric(V2sub), winProb)
winProbMatrix
lines <- unlist(stri_split_regex(NFLtable[[3]]$X6[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 12)])
charVec = "the line is pk and the overunder is OFF"
pseudoLine <- round(runif(1) - .5, 1)
subPK <- gsub("pk", pseudoLine, charVec)
pseudoLine <- round(runif(1) - .5,1)
gsub("OFF", pseudoLine, subPK)
rm(list = ls())
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
library(memisc)
#rm(wtpNames, yahooNames, NFLdf)
winProb <- function(spread){
if(is.numeric(spread)){
1-pnorm(spread, sd=13.3, lower.tail = T)
} else {
NA
}
}
victorProb <- function(prob){max(prob, 1 - prob)}
# Functions for point spread data from Covers
genNFLtables <- function(){
coversNFL_parsed <- read_html("http://www.covers.com/odds/football/nfl-spreads.aspx", encoding = "UTF-8")
html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
}
genNFLSchedule <- function(NFLtable){
unlist(stri_split_regex(NFLtable[[3]]$X1[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
}
subOFFpk <- function(charVec){ #charVec = "the line is pk and the overunder is OFF"
pseudoLine <- round(runif(1) - .5, 1)
subPK <- gsub("pk", pseudoLine, charVec)
pseudoLine <- round(runif(1) - .5,1)
outCharVec <- gsub("OFF", pseudoLine, subPK)
outCharVec
} #subPK("th
nGames = 16
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
NFLtable <- genNFLtables()
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subOFFpk)
lines
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
V2sub
winProbMatrix[, 1] <- sapply(as.numeric(V2sub), winProb)
winProbMatrix
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
system.time(genWeeklyCSV(17))
data <- read.csv("WEEK17_2015.csv", header=T, stringsAsFactors = F)
data
data <- read.csv("WEEK17_2015.csv", header=T, stringsAsFactors = F)[1:16,]
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
data
rank(winprob)
confidence <- rank(winprob, ties.method = "random")
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
rm(list = ls())
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
system.time(genWeeklyCSV(17))
data <- read.csv("WEEK17_2015.csv", header=T, stringsAsFactors = F)
data
winprob <- data$WinProbability
confidence <- data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd("D:/Documents/GitHub/pickem")
load("straightStartSpecific.Rdata")
weekNum <- 17
infile <- paste0("D:/WTP/WEEK", weekNum, "_2015.csv")
weekFile <- read.csv(infile, stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){#i = 1
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
#rm(fanScores)
calcTactics <- function(size){#size=95
fanScoreSubset <- fanSubset[, 1:size] #fanScoreSubset[1:10, 1:10]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(95))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
###
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
thisDate <- as.character(format(Sys.time(), "%D %I:%M %Z"))
fileName <- paste0("WTP_pickem/app2015wk", weekNum, ".RData")
save(weekFile, playersBest, thisDate, weekNum, file = fileName)
