iterators:::iter.iter
iterators:::nextElem.abstractiter
###################################################
### code chunk number 5: iter1
###################################################
iforever <- function(x) {
nextEl <- function() x
obj <- list(nextElem=nextEl)
class(obj) <- c('iforever', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 6: runiter1
###################################################
it <- iforever(42)
nextElem(it)
nextElem(it)
###################################################
### code chunk number 7: runiter1.part2
###################################################
unlist(as.list(it, n=6))
###################################################
### code chunk number 8: iter2
###################################################
irep <- function(x, times) {
nextEl <- function() {
if (times > 0)
times <<- times - 1
else
stop('StopIteration')
x
}
obj <- list(nextElem=nextEl)
class(obj) <- c('irep', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 9: runiter2
###################################################
it <- irep(7, 6)
unlist(as.list(it))
###################################################
### code chunk number 10: iter3
###################################################
ivector <- function(x, ...) {
i <- 1
it <- idiv(length(x), ...)
nextEl <- function() {
n <- nextElem(it)
ix <- seq(i, length=n)
i <<- i + n
x[ix]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('ivector', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 11: runiter3
###################################################
it <- ivector(1:25, chunks=3)
as.list(it)
###################################################
### code chunk number 12: generichasnext
###################################################
hasNext <- function(obj, ...) {
UseMethod('hasNext')
}
###################################################
### code chunk number 13: hasnextmethod
###################################################
hasNext.ihasNext <- function(obj, ...) {
obj$hasNext()
}
ihasNext <- function(it) {
if (!is.null(it$hasNext)) return(it)
cache <- NULL
has_next <- NA
nextEl <- function() {
if (!hasNx())
stop('StopIteration', call.=FALSE)
has_next <<- NA
cache
}
hasNx <- function() {
if (!is.na(has_next)) return(has_next)
tryCatch({
cache <<- nextElem(it)
has_next <<- TRUE
},
error=function(e) {
if (identical(conditionMessage(e), 'StopIteration')) {
has_next <<- FALSE
} else {
stop(e)
}
})
has_next
}
obj <- list(nextElem=nextEl, hasNext=hasNx)
class(obj) <- c('ihasNext', 'abstractiter', 'iter')
obj
}
it <- ihasNext(icount(3))
while (hasNext(it)) {
print(nextElem(it))
}
irecycle <- function(it) {
values <- as.list(iter(it))
i <- length(values)
nextEl <- function() {
i <<- i + 1
if (i > length(values)) i <<- 1
values[[i]]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('irecycle', 'abstractiter', 'iter')
obj
}
it <- irecycle(icount(3))
unlist(as.list(it, n=9))
ilimit <- function(it, times) {
it <- iter(it)
nextEl <- function() {
if (times > 0)
times <<- times - 1
else
stop('StopIteration')
nextElem(it)
}
obj <- list(nextElem=nextEl)
class(obj) <- c('ilimit', 'abstractiter', 'iter')
obj
}
irep2 <- function(x, times)
ilimit(iforever(x), times)
it <- ihasNext(irep2('foo', 3))
while (hasNext(it)) {
print(nextElem(it))
}
iterable <- 1:3
n <- 3
it <- ilimit(irecycle(iterable), n * length(iterable))
unlist(as.list(it))
rep(iterable, n)
library("doParallel", lib.loc="~/R/win-library/3.1")
vignette("gettingstartedParallel")
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
library(doParallel}
library(doParallel)
registerDoParallel(cores=3)
foreach(i=1:3) %dopar% sqrt(i)
ptime
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
getDoParWorkers()
mcoptions <- list(preschedule=FALSE, set.seed=FALSE)
foreach(i=1:3, .options.multicore=mcoptions) %dopar% sqrt(i)
options(cores=2)
getDoParWorkers()
options(cores=3)
getDoParWorkers()
registerDoParallel(4)
options(cores=2)
getDoParWorkers()
stopCluster(cl)
install.packages(c("ape", "arules", "arulesViz", "BH", "bit64", "caret", "chron", "CORElearn", "DEoptimR", "devtools", "diptest", "dplyr", "DSL", "e1071", "ElemStatLearn", "evaluate", "excel.link", "forecast", "foreign", "formatR", "Formula", "gdata", "ggthemes", "glmnet", "gplots", "gridExtra", "gtools", "highlight", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httr", "igraph", "installr", "jsonlite", "knitcitations", "knitr", "lattice", "lava", "lme4", "lmtest", "manipulate", "mapproj", "maps", "markdown", "mclust", "mime", "mnormt", "NLP", "NLPutils", "numDeriv", "openNLP", "openNLPdata", "pander", "party", "pgmm", "plotrix", "plyr", "polspline", "prettyR", "proxy", "pryr", "psych", "qdap", "qdapDictionaries", "qdapRegex", "Quandl", "R.utils", "R6", "rattle", "Rcpp", "RcppArmadillo", "RCurl", "RefManageR", "rgl", "rmarkdown", "rms", "robustbase", "ROCR", "RODBC", "roxygen2", "rpart", "RSNNS", "rstudioapi", "sandwich", "scales", "seriation", "shiny", "shinydashboard", "sjPlot", "sp", "stringdist", "stringi", "stringr", "strucchange", "testthat", "tis", "tm", "topicmodels", "tree", "treemap", "TSP", "TTR", "vcd", "XML"))
library(foreach)
foreach(i=1:10) %do% sample(c("H", "T"), 10000, replace=TRUE)
foreach(i=1:10) %dopar% sample(c("H", "T"), 10000, replace=TRUE)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cores = 3)
options(cores)
options()
stopImplicitCluster()
sampleVec <- sample(1:16, size = 16)
sampleOutcomes <- sample(0:1, size = 160, replace = T)
crossprod(sampleVec, sampleOutcomes)
sampleOutcomes <- matrix(sample(0:1, size = 160, replace = T), nrow = 16)
crossprod(sampleVec, sampleOutcomes)
crossprod(rep(NULL, 16), sampleOutcomes)
crossprod(rep(0, 16), sampleOutcomes)
sampleMult <- sample(1:16, size = 64, replace = T)
calcPoints <- function(rankVec){
pointVec <- as.vector(t(crossprod(rankVec, simOutcomes2)))
}
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
calcPoints(sampleVec, sampleOutcomes)
calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
sampleMult <- matrix(sample(1:16, size = 64, replace = T), nrow = 16)
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
is.matrix(sampleMult)
is.matrix(sampleVec)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- as.matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
}
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
} else {
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
pointVec
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
sampleMult
apply(sampleMult, 2, calcPoints, outcomeMatrix = sampleOutcomes)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/wtpP')
shiny::runApp('GitHub/wtpP')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
library(httr)
library(rvest)
library(magrittr)
freak_get <- GET("http://torrentfreak.com/top-10-most-pirated-movies-of-the-week-130304/")
freak_html <- htmlParse(content(freak_get, as="text"))
library(XML)
freak_html <- htmlParse(content(freak_get, as="text"))
freak <- html_session("http://torrentfreak.com/top-10-most-pirated-movies-of-the-week-130304/")
xpathSApply(freak_html, "//*/td[3]", xmlValue)[1:10]
xpathSApply(freak_html, "//*/td[1]", xmlValue)[2:11]
xpathSApply(freak_html, "//*/td[4]", xmlValue)
xpathSApply(freak_html, "//*/td[4]/a[contains(@href,'imdb')]", xmlAttrs, "href")
freak %>% html_nodes(xpath="//*/td[3]") %>% html_text() %>% .[1:10]
freak %>% html_nodes(xpath="//*/td[1]") %>% html_text() %>% .[2:11]
freak %>% html_nodes(xpath="//*/td[4]") %>% html_text() %>% .[1:10]
freak %>% html_nodes(xpath="//*/td[4]/a[contains(@href,'imdb')]") %>% html_attr("href") %>% .[1:10]
freak %>% html_nodes("td:nth-child(3)") %>% html_text() %>% .[1:10]
freak %>% html_nodes("td:nth-child(1)") %>% html_text() %>% .[2:11]
freak %>% html_nodes("td:nth-child(4)") %>% html_text() %>% .[1:10]
freak %>% html_nodes("td:nth-child(4) a[href*='imdb']") %>% html_attr("href") %>% .[1:10]
data.frame(movie=freak %>% html_nodes("td:nth-child(3)") %>% html_text() %>% .[1:10],
rank=freak %>% html_nodes("td:nth-child(1)") %>% html_text() %>% .[2:11],
rating=freak %>% html_nodes("td:nth-child(4)") %>% html_text() %>% .[1:10],
imdb.url=freak %>% html_nodes("td:nth-child(4) a[href*='imdb']") %>% html_attr("href") %>% .[1:10],
stringsAsFactors=FALSE)
install.packages(c("rlist", "pipeR"))
library(rvest) # devtools::install_github("hadley/rvest")
install.packages("Rcpp")
install.packages("xml2")
library(rvest) # devtools::install_github("hadley/rvest")
library(rlist) # devtools::install_github("rlist","renkun-ken")
library(pipeR)
url <- "http://cran.r-project.org/web/packages/available_packages_by_date.html"
Pipe(url)$
.(~ message(Sys.time(),": downloading"))$
html()$
html_nodes(xpath = "//tr//td[3]")$
.(~ message("number of packages: ", length(.)))$
html_text(trim = TRUE)$
.(~ message(Sys.time(),": text extracted"))$
list.map(Pipe(.)$
strsplit("[^a-zA-Z]")$
unlist(use.names = FALSE)$
tolower()$
list.filter(nchar(.) > 3L)$
value)$
unlist()$
table()$
sort(decreasing = TRUE)$
head(50)$
.(~ message(Sys.time(),": task complete"))
url <- "http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=6&type=c"
Pipe(url)$
.(~ message(Sys.time(),": downloading"))$
html()$
html_nodes(xpath = "//tr//td[3]")$
.(~ message("number of packages: ", length(.)))$
html_text(trim = TRUE)$
.(~ message(Sys.time(),": text extracted"))$
list.map(Pipe(.)$
strsplit("[^a-zA-Z]")$
unlist(use.names = FALSE)$
tolower()$
list.filter(nchar(.) > 3L)$
value)$
# put everything in a large character vector
unlist()$
# create a table of word count
table()$
# sort the table descending
sort(decreasing = TRUE)$
# take out the first 100 elements
head(50)$
.(~ message(Sys.time(),": task complete"))
dummy_results <- matrix(rep(1:8, each = 5), nrow = 5)
dummy_results
dummy_fans <- matrix(rep(2:3, each = 5), nrow = 5)
dummy_fans
dummy_results + dummy_fans
dummy_results > dummy_fans
dummy_results > dummy_fans[,1]
?mapply
?mat
genGTmatrix <- function(vec, mat){
mat > vec
}
genGTmatrix <- function(vec, mat){ # vec must be same length as nrow(mat) or dim(mat)[1]
colSums(mat > vec)
}
sumGTmatrix(scoringMat, resultsMat){
outVec <- rep(0, ncol(resultsMat))
reps <- ncol(scoringMat)
for (j in 1:reps){
outVec <- outVec + genGTmatrix(scoringMat[, j], resultsMat)
}
outVec
}
sumGTmatrix <- function(scoringMat, resultsMat){
outVec <- rep(0, ncol(resultsMat))
reps <- ncol(scoringMat)
for (j in 1:reps){
outVec <- outVec + genGTmatrix(scoringMat[, j], resultsMat)
}
outVec
}
sumGTmatrix(dummy_fans, dummy_results)
system.time(sumGTmatrix(dummy_fans, dummy_results))
dummy_results <- matrix(rep(1:80, each = 500), nrow = 500)
dummy_fans <- matrix(rep(2:3, each = 500), nrow = 500)
system.time(sumGTmatrix(dummy_fans, dummy_results))
sumGTmatrix(dummy_fans, dummy_results)
dummy_results <- matrix(rep(1:65536, each = 2000), nrow = 2000)
dummy_fans <- matrix(rep(1:10, each = 2000), nrow = 2000)
system.time(sumGTmatrix(dummy_fans, dummy_results))
library(compiler)
cmpSumGT <- cmpfun(sumGTmatrix)
system.time(cmpSumGT(dummy_fans, dummy_results))
system.time(bestVec <- cmpSumGT(dummy_fans, dummy_results))
head(bestVec)
setwd("D:/WTP")
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
system.time(genWeeklyCSV(14))
data <- read.csv("WEEK14_2015.csv", header=T, stringsAsFactors = F)
data
setwd("D:/Documents/GitHub/pickem")
rm(list = ls())
load("straightStartSpecific.Rdata")
weekNum <- 14
infile <- paste0("D:/WTP/WEEK", weekNum, "_2015.csv")
weekFile <- read.csv(infile, stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){#i = 1
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
#rm(fanScores)
calcTactics <- function(size){#size=95
fanScoreSubset <- fanSubset[, 1:size] #fanScoreSubset[1:10, 1:10]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(95))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
###
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
thisDate <- as.character(format(Sys.time(), "%D %I:%M %Z"))
fileName <- paste0("WTP_pickem/app2015wk", weekNum, ".RData")
save(weekFile, playersBest, thisDate, weekNum, file = fileName)
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
setwd("D:/Documents/GitHub/pickem/WTP_pickem")
shiny::runApp()
