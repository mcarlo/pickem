fansStraightRaw <- stri_split_regex(distStraightList, "\\n")
teams <- sapply(gsub("@ ", "@", fansStraightRaw[[1]][which(grepl("Percentage", fansStraightRaw[[1]])) - 1]), trimws)
teamsStraight <- sapply(gsub("@ ", "@", fansStraightRaw[[1]][which(grepl("Percentage", fansStraightRaw[[1]])) - 1]), trimws)
teamsStraight == teams
sum(teamsStraight != teams)
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest) # the new package, version 0.3.0
labelGame <- function(text1, text2){
ifelse(grepl("@", text1), paste0(text2, text1), paste0(text1, text2))
}
distConf_parsed <- read_html("http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=6&type=c", encoding = "UTF-8")
distConfList <- html_text(html_nodes(distConf_parsed, "#bd"))
fansConfRaw <- stri_split_regex(distConfList, "\\n")
teams <- sapply(gsub("@ ", "@", fansConfRaw[[1]][which(grepl("Percentage", fansConfRaw[[1]])) - 1]), trimws)
fanteams <- as.numeric(sapply(gsub("%", "", fansConfRaw[[1]][which(grepl("Percentage", fansConfRaw[[1]])) + 1]), trimws))/100
FanProb <- matrix(fanteams, ncol = 2, byrow = T)[, 1]
DogProb <- matrix(fanteams, ncol = 2, byrow = T)[, 2]
teamsConf <- sapply(gsub("@ ", "@", fansConfRaw[[1]][which(grepl("Avg. Confidence", fansConfRaw[[1]])) - 1]), trimws)
FavConf <- as.numeric(sapply(fansConfRaw[[1]][which(grepl("Avg. Confidence", fansConfRaw[[1]])) - 1], trimws))
DogConf <- as.numeric(sapply(fansConfRaw[[1]][which(grepl("Avg. Confidence", fansConfRaw[[1]])) + 1], trimws))
distStraight_parsed <- read_html("http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=6", encoding = "UTF-8")
distStraightList <- html_text(html_nodes(distConf_parsed, "#bd"))
fansStraightRaw <- stri_split_regex(distStraightList, "\\n")
teamsStraight <- sapply(gsub("@ ", "@", fansStraightRaw[[1]][which(grepl("Percentage", fansStraightRaw[[1]])) - 1]), trimws)
fanteamsStraight <- as.numeric(sapply(gsub("%", "", fansStraightRaw[[1]][which(grepl("Percentage", fansStraightRaw[[1]])) + 1]), trimws))/100
StraightFans <- matrix(fanteams, ncol = 2, byrow = T)[, 1]
gamesMatrix <- data.table(matrix(teams, ncol = 2, byrow = T))
setnames(gamesMatrix, c("V1", "V2"), c("FanFav", "FanDog"))
gamesMatrix[, Game := unname(unlist(Map(labelGame, gamesMatrix[, FanFav], gamesMatrix[, FanDog])))]
if (sum(teamsStraight != teams) == 0){
gamesMatrix[, `:=`(FanProb = FanProb, DogProb = DogProb, FavConf=FavConf, DogConf=DogConf,  StraightFans = StraightFans)]
}
gamesMatrix
source("wtp_scrape.R")
source("wtp_scrape.R")
tablesNFL <- genNFLtables()  #html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
rawSchedule <- genNFLSchedule(tablesNFL)  #unlist(stri_split_regex(tablesNFL[[3]]$X1[grepl("@", tablesNFL[[3]]$X1)], "\\r\\n"))
rawSchedule
numGames <- length(rawSchedule)/4
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
tablesNFL <- genNFLtables()  #html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
tablesNFL
rawSchedule
source("wtp_scrape.R")
rawSchedule <- genNFLSchedule(tablesNFL)  #unlist(stri_split_regex(tablesNFL[[3]]$X1[grepl("@", tablesNFL[[3]]$X1)], "\\r\\n"))
rawSchedule
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
tablesNFL <- genNFLtables()  #html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
rawSchedule <- genNFLSchedule(tablesNFL)  #unlist(stri_split_regex(tablesNFL[[3]]$X1[grepl("@", tablesNFL[[3]]$X1)], "\\r\\n"))
gameMatrix <- genGameMatrix(rawSchedule, NFLtable) #data.table(matrix(rawSchedule, nrow = numGames, byrow = T)[, c(1, 4)])
gameMatrix <- genGameMatrix(rawSchedule, tablesNFL) #data.table(matrix(rawSchedule, nrow = numGames, byrow = T)[, c(1, 4)])
source("wtp_scrape.R")
gameMatrix <- genGameMatrix(rawSchedule, tablesNFL) #data.table(matrix(rawSchedule, nrow = numGames, byrow = T)[, c(1, 4)])
gameMatrix
gameMatrix
NFLmap <- read.csv("~/NFLteams.csv", stringsAsFactors = F, header = T)
NFLmap
NFLmap <- data.table(read.csv("~/NFLteams.csv", stringsAsFactors = F, header = T))
NFLmap[, `:=`(WTPhome = paste0("@", WTP), YahooHome = paste0("@ ", Yahoo))]
NFLmap
source("wtp_scrape.R")
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
gameMatrix <- genGameMatrix(rawSchedule, tablesNFL)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
source("wtp_scrape.R")
rm(list = ls())
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
rm(gameMatrix)
source("wtp_scrape.R")
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
source("wtp_scrape.R")
rm(gameMatrix)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
gameMatrix
gameMatrix
rawSchedule
week <- 6
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
week <- 6
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
#rm(gameMatrix)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
fanMatrix <- fetchFanPicks(week)
source("wtp_scrape.R")
week <- 6
fanMatrix <- fetchFanPicks(week)
fanMatrix
fanMatrix
NFLmap
translate <- function(teamName){
NFLmap <- data.table(read.csv("~/NFLteams.csv", stringsAsFactors = F, header = T))
NFLmap[, `:=`(WTPhome = paste0("@", WTP), YahooHome = paste0("@ ", Yahoo))]
ifelse(grepl("@", teamName), NFLmap[YahooHome == teamName, WTP], NFLmap[Yahoo == teamName, WTP])
}
translate("@ New Orleans")
translate <- function(teamName){
NFLmap <- data.table(read.csv("~/NFLteams.csv", stringsAsFactors = F, header = T))
NFLmap[, `:=`(WTPhome = paste0("@", WTP), YahooHome = paste0("@ ", Yahoo))]
ifelse(grepl("@", teamName), NFLmap[YahooHome == teamName, WTPhome], NFLmap[Yahoo == teamName, WTP])
}
translate("@ New Orleans")
translate("New York (NYG)")
translate("@ New York (NYG)")
source("wtp_scrape.R")
fanMatrix <- fetchFanPicks(week)
fanMatrix
fanMatrix
rm(list = ls())
setwd("c:/planinfo")
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
HMPlan <- read.delim("HMPlan.txt", sep = ":",
stringsAsFactors=FALSE)
HMPlan$PLAN_ID <- as.integer(HMPlan$PLAN_ID);
plans <- data.table(HMPlan, key = "PLAN_ID")
planFields <- colnames(plans)
planFields[grepl("ROTH", planFields) ]
HMEmployer_match <- read.delim("HMEmployer_match.txt", sep = ":",
stringsAsFactors=FALSE)
head(HMEmployer_match)
colnames(HMEmployer_match) <- c("EMPLOYER_MATCH_CAP_ID", "PLAN_CAT_HCE", "YRS_SERVICE_GREQ", "YRS_SERVICE_LSTHAN", "AGE_GREQ", "AGE_LSTHAN", "EMPLOYER_MATCH_PCT_CAP", "EMPLOYER_MATCH_DLR_CAP", "MATCHING_CODE", "EMPLOYER_MATCH_DLR_MIN")
Match <- data.table(HMEmployer_match, key = c("PLAN_CAT_HCE"))
Match[PLAN_CAT_HCE == plans[PLAN_ID == 36685, STR_PCH_H_IDS]]
HMPlan_Cat_HCE <- read.delim("HMPlan_Cat_Hce.txt", sep = ":",
stringsAsFactors=FALSE)
head(HMPlan_Cat_HCE)
colnames(HMPlan_Cat_HCE) <- c("Plan_Cat_HCE_id", "Plan", "Category", "Highly_compensated", "PCH_contrib_max_is_DorP", "PCH_contrib_max_dlr", "PCH_contrib_max_pct", "IsThere_PCH_match_dollar_lmt", "PCH_match_dollar_lmt_amt", "Nr_years_service_rows", "Nr_pct_contrib_columns", "Pool_factor_last_yr", "Projected_LR_pool_factor")
colnames(HMPlan_Cat_HCE) <- sapply(colnames(HMPlan_Cat_HCE), toupper)
colnames(HMPlan_Cat_HCE)[14:27] <- c("STR_PCH_ECT_IDS", "STR_EMPLOYER_MATCH_IDS", "STR_SALES_RESTRICTION_IDS", "STR_OTHER_PERMITTED_IDS", "MATCHING_COLUMN_NAME", "MATCHING_ROW_NAME", "PCH_MATCH_DOLLAR_MIN_AMT", "HAS_MATCHING_CODE", "MATCH_CAP_BY_TABLE", "PCH_CONTRIB_MAX_RULE", "PCH_MATCHING_MAX_DORP", "PCH_MATCHING_MAX_PCT", "CATCHUP_CONTRIB_MAX_PCT", "CATCHUP_ALLOWED_DOLLAR_AMT")
Plan_Cat_HCE <- data.table(HMPlan_Cat_HCE, key = "PLAN_CAT_HCE_ID")
Plan_Cat_HCE[PLAN == 36685]
Plan_Cat_HCE[, c(colnames(Plan_Cat_HCE)[grepl("MATCH", colnames(Plan_Cat_HCE))])]
Plan_Cat_HCE[PLAN_ID == 23100]
Plan_Cat_HCE[PLAN == 23100]
HMPlan
plans
plans[TRUST_FAMILY == 443]
Plan_Cat_HCE[PLAN == 22]
Plan_Cat_HCE
Plan_Cat_HCE[PLAN == 22]
HMCompensation_type <- read.table("C:/planinfo/HMCompensation_type.txt", quote="\"", comment.char="", stringsAsFactors=FALSE)
View(HMCompensation_type)
HMCompensation_type <- read.delim("HMCompensation_type.txt", sep = ":",
stringsAsFactors=FALSE)
getwd()
load("C:/planinfo/pctECT.RData")
load("compType.RData")
load("eligCompType.RData")
eligCompType
eligCompType[PLAN == 22]
compType[PLAN == 22]
currentAge <- 25
retirementAge <- 65
yearsToSave <- retirementAge - currentAge
?std
growth <- (arithmetic - .5 * std)
arithmetic <- .08167
std <- .15884
growth <- (arithmetic - .5 * std)
Sy <- ((1+growth) - 1)/growth
Sy <- ((1+growth) ** yearsToSave - 1)/growth
retDollars <- (1+inflation) ** yearsToSave
inflation <- .03
retDollars <- (1+inflation) ** yearsToSave
retDollars <- (1+inflation) ** yearsToSave
SyReal <- Sy / retDollars
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
week <- 6
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
#rm(gameMatrix)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
fanMatrix <- fetchFanPicks(week)
?trimws
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK07_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
rm(list = ls())
curwd <- getwd()
setwd("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
week <- 7
tablesNFL <- genNFLtables()
rawSchedule <- genNFLSchedule(tablesNFL)
#rm(gameMatrix)
gameMatrix <- suppressWarnings(genGameMatrix(rawSchedule, tablesNFL))
fanMatrix <- fetchFanPicks(week)
fanMatrix
fanMatrix
APR <- .0405
monthly <- (1 + APR)**(1/12) - 1
30000*monthly
ann3yr <- ((1 - (1 + monthly)**360)/monthly)
ann3yr <- ((1 - (1 + monthly)**(-360))/monthly)
30000/ann3yr
ann3yr <- ((1 - (1 + monthly)**(-36))/monthly)
30000/ann3yr
APR <- .043 #05
monthly <- (1 + APR)**(1/12) - 1
ann3yr <- ((1 - (1 + monthly)**(-36))/monthly)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 4)
ann3yr <- ((1 - (1 + monthly)**(-36))/monthly)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 6)
ann3yr <- ((1 - (1 + monthly)**(-36))/monthly)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 4)
ann3yr <- ((1 - (1 + monthly)**(-36))/monthly)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 2)
30000/ann3yr
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 4)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 5)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 4)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 4)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 4)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 4)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
monthly <- round((1 + APR)**(1/12) - 1, 5)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
APR <- .0405 #05
monthly <- round((1 + APR)**(1/12) - 1, 5)
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
.0405*30/365
monthly <- .0405*30/365
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
APR <- .043 #05 #05
monthly <- .0405*30/365
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
APR <- .043 #05 #05
monthly <- APR * 30 / 365
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
APR <- .0405
monthly <- APR * 30 / 365
ann3yr <- round(((1 - (1 + monthly)**(-36))/monthly), 5)
30000/ann3yr
install.packages(c("doParallel", "foreach", "iterators", "lme4", "packrat", "prodlim", "randomForest", "readr", "relations", "rmarkdown", "sets", "testthat"))
setwd("~/GitHub/confidence/WTP_confidence")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK07_2015.csv")  #
#processFile("D:/WTP/WEEK01_2015test13.csv") #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
setwd("~/GitHub/confidence")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK07_2015.csv")  #
#processFile("D:/WTP/WEEK01_2015test13.csv") #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
#setwd("D:/Documents/GitHub/fs2/weeklyApp_confidence")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "WTP_confidence/useWeeklyFile2015_07.RData")
shiny::runApp('WTP_confidence')
rm(list = ls())
setwd("~/GitHub/pickem")
rm(list = ls())
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK07_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
#save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk07.RData")
###
# rm(list = ls())
# setwd("D:/Documents/GitHub/straightsims")
#
# load("2015wk03.RData")
# system.time(compTactics(firstList, 5))
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
save(weekFile, playersBest, file = "WTP_pickem/app2015wk07.RData")
setwd("~/GitHub/pickem/WTP_pickem")
shiny::runApp()
